{"ast":null,"code":"import axios from 'axios';\nimport { ADD_SUBSCRIPTION, SAVE_PAYMENT_METHOD, ORDER_CREATE_REQUEST, ORDER_CREATE_SUCCESS, ORDER_CREATE_FAIL } from '../constants/orderConstants';\nexport const addOrder = id => async (dispatch, getState) => {\n  const {\n    data\n  } = await axios.get(`/api/subscriptions/${id}`);\n  dispatch({\n    type: ADD_SUBSCRIPTION,\n    payload: {\n      subscription: data._id,\n      name: data.name,\n      image: data.image,\n      price: data.price\n    }\n  });\n  localStorage.setItem('subItem', JSON.stringify(getState().selectedSub.subItem));\n};\nexport const savePaymentMethod = data => dispatch => {\n  dispatch({\n    type: SAVE_PAYMENT_METHOD,\n    payload: data\n  });\n  localStorage.setItem('paymentMethod', JSON.stringify(data));\n};\nexport const createOrder = (subname, paymentMethod) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_CREATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/add/`, {\n      'plan': subname,\n      'pm': paymentMethod\n    }, config);\n    dispatch({\n      type: ORDER_CREATE_SUCCESS,\n      payload: data\n    }); // dispatch({\n    //     type: CART_CLEAR_ITEMS,\n    //     payload: data\n    // })\n    // localStorage.removeItem('cartItems')\n  } catch (error) {\n    dispatch({\n      type: ORDER_CREATE_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};","map":{"version":3,"sources":["D:/Project - Copy/frontend/src/actions/orderActions.js"],"names":["axios","ADD_SUBSCRIPTION","SAVE_PAYMENT_METHOD","ORDER_CREATE_REQUEST","ORDER_CREATE_SUCCESS","ORDER_CREATE_FAIL","addOrder","id","dispatch","getState","data","get","type","payload","subscription","_id","name","image","price","localStorage","setItem","JSON","stringify","selectedSub","subItem","savePaymentMethod","createOrder","subname","paymentMethod","userLogin","userInfo","config","headers","Authorization","token","post","error","response","detail","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,gBADJ,EAEIC,mBAFJ,EAIIC,oBAJJ,EAKIC,oBALJ,EAMIC,iBANJ,QAOO,6BAPP;AAUA,OAAO,MAAMC,QAAQ,GAAIC,EAAD,IAAQ,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAC1D,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMV,KAAK,CAACW,GAAN,CAAW,sBAAqBJ,EAAG,EAAnC,CAAvB;AAGAC,EAAAA,QAAQ,CAAC;AACLI,IAAAA,IAAI,EAAEX,gBADD;AAELY,IAAAA,OAAO,EAAE;AACLC,MAAAA,YAAY,EAAEJ,IAAI,CAACK,GADd;AAELC,MAAAA,IAAI,EAAEN,IAAI,CAACM,IAFN;AAGLC,MAAAA,KAAK,EAAEP,IAAI,CAACO,KAHP;AAILC,MAAAA,KAAK,EAAER,IAAI,CAACQ;AAJP;AAFJ,GAAD,CAAR;AAUAC,EAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgCC,IAAI,CAACC,SAAL,CAAeb,QAAQ,GAAGc,WAAX,CAAuBC,OAAtC,CAAhC;AACH,CAfM;AAkBP,OAAO,MAAMC,iBAAiB,GAAIf,IAAD,IAAWF,QAAD,IAAc;AACrDA,EAAAA,QAAQ,CAAC;AACLI,IAAAA,IAAI,EAAEV,mBADD;AAELW,IAAAA,OAAO,EAAEH;AAFJ,GAAD,CAAR;AAKAS,EAAAA,YAAY,CAACC,OAAb,CAAqB,eAArB,EAAsCC,IAAI,CAACC,SAAL,CAAeZ,IAAf,CAAtC;AACH,CAPM;AASP,OAAO,MAAMgB,WAAW,GAAG,CAACC,OAAD,EAASC,aAAT,KAA2B,OAAOpB,QAAP,EAAiBC,QAAjB,KAA8B;AAChF,MAAI;AACAD,IAAAA,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAAET;AADD,KAAD,CAAR;AAIA,UAAM;AACF0B,MAAAA,SAAS,EAAE;AAAEC,QAAAA;AAAF;AADT,QAEFrB,QAAQ,EAFZ;AAIA,UAAMsB,MAAM,GAAG;AACXC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAELC,QAAAA,aAAa,EAAG,UAASH,QAAQ,CAACI,KAAM;AAFnC;AADE,KAAf;AAOA,UAAM;AAAExB,MAAAA;AAAF,QAAW,MAAMV,KAAK,CAACmC,IAAN,CAClB,WADkB,EAEnB;AAAC,cAAOR,OAAR;AAAgB,YAAKC;AAArB,KAFmB,EAGnBG,MAHmB,CAAvB;AAMAvB,IAAAA,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAAER,oBADD;AAELS,MAAAA,OAAO,EAAEH;AAFJ,KAAD,CAAR,CAtBA,CA2BA;AACA;AACA;AACA;AAEA;AAGH,GAnCD,CAmCE,OAAO0B,KAAP,EAAc;AACZ5B,IAAAA,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAAEP,iBADD;AAELQ,MAAAA,OAAO,EAAEuB,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAe3B,IAAf,CAAoB4B,MAAtC,GACHF,KAAK,CAACC,QAAN,CAAe3B,IAAf,CAAoB4B,MADjB,GAEHF,KAAK,CAACG;AAJP,KAAD,CAAR;AAMH;AACJ,CA5CM","sourcesContent":["import axios from 'axios'\r\nimport {\r\n    ADD_SUBSCRIPTION,\r\n    SAVE_PAYMENT_METHOD,\r\n\r\n    ORDER_CREATE_REQUEST,\r\n    ORDER_CREATE_SUCCESS, \r\n    ORDER_CREATE_FAIL,\r\n} from '../constants/orderConstants'\r\n\r\n\r\nexport const addOrder = (id) => async (dispatch, getState) => {\r\n    const { data } = await axios.get(`/api/subscriptions/${id}`)\r\n\r\n\r\n    dispatch({\r\n        type: ADD_SUBSCRIPTION,\r\n        payload: {\r\n            subscription: data._id,\r\n            name: data.name,\r\n            image: data.image,\r\n            price: data.price,\r\n            \r\n        }\r\n    })\r\n    localStorage.setItem('subItem', JSON.stringify(getState().selectedSub.subItem))\r\n}\r\n\r\n\r\nexport const savePaymentMethod = (data) => (dispatch) => {\r\n    dispatch({\r\n        type: SAVE_PAYMENT_METHOD,\r\n        payload: data,\r\n    })\r\n\r\n    localStorage.setItem('paymentMethod', JSON.stringify(data))\r\n}\r\n\r\nexport const createOrder = (subname,paymentMethod) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_CREATE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            `/api/add/`,\r\n            {'plan':subname,'pm':paymentMethod},\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_CREATE_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        // dispatch({\r\n        //     type: CART_CLEAR_ITEMS,\r\n        //     payload: data\r\n        // })\r\n\r\n        // localStorage.removeItem('cartItems')\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_CREATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}